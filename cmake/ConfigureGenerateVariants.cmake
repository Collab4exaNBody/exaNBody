get_filename_component(CONFIGURE_GENERATE_VARIANTS_SCRIPT_DIR ${CMAKE_CURRENT_LIST_FILE} DIRECTORY)
set(CONFIGURE_GENERATE_VARIANTS_SCRIPT ${CONFIGURE_GENERATE_VARIANTS_SCRIPT_DIR}/ConfigureGenerateVariantsScript.cmake)

# parse exanb/field_sets.h to list available grid variants
#message(STATUS "XNB_FIELD_SETS_HDR=${XNB_FIELD_SETS_HDR}")
file(READ ${XNB_FIELD_SETS_HDR} FIELD_SETS_DATA)
string(REGEX MATCHALL "using[ \n\t]+StandardFieldSets[ \n\t]*=[ \n\t]*FieldSets<[^>]*>" FIELD_SETS_DATA "${FIELD_SETS_DATA}")
string(REGEX REPLACE "using[ \n\t]+StandardFieldSets[ \n\t]*=[ \n\t]*FieldSets<" "" FIELD_SETS_DATA "${FIELD_SETS_DATA}")
string(REGEX REPLACE ">\$" "" FIELD_SETS_DATA "${FIELD_SETS_DATA}")
string(REGEX REPLACE "[ \n\t]+" "" FIELD_SETS_DATA "${FIELD_SETS_DATA}")
string(REGEX REPLACE "," ";" FIELD_SETS_DATA "${FIELD_SETS_DATA}")

# enable per option filed set activation/deactivation
foreach(FS ${FIELD_SETS_DATA})
  #message(STATUS "found grid field set ${FS}")
  if(NOT XSTAMP_ENABLE_${FS}_FORCED)
    option(XSTAMP_ENABLE_${FS} "Enable ${FS} grid variant" ON)
  endif()
endforeach()
string(REPLACE ";" " " FIELD_SET_NAMES "${FIELD_SETS_DATA}")
message(STATUS "available field sets : ${FIELD_SET_NAMES}")

# generate field set list macro
unset(XSTAMP_FOR_EACH_FIELD_SET)
unset(XSTAMP_ENABLED_FIELD_SETS)
foreach(FS ${FIELD_SETS_DATA})
  if(XSTAMP_ENABLE_${FS})
    if(XSTAMP_FOR_EACH_FIELD_SET)
      set(XSTAMP_FOR_EACH_FIELD_SET "${XSTAMP_FOR_EACH_FIELD_SET} ")
      set(XSTAMP_ENABLED_FIELD_SETS "${XSTAMP_ENABLED_FIELD_SETS},")
    endif()
    set(XSTAMP_FOR_EACH_FIELD_SET "${XSTAMP_FOR_EACH_FIELD_SET}FS(${FS})")
    set(XSTAMP_ENABLED_FIELD_SETS "${XSTAMP_ENABLED_FIELD_SETS}${FS}")
  endif()
endforeach()
#message(STATUS "generate file ${PROJECT_BINARY_DIR}/include/exanb/field_sets_macro.h")
file(MAKE_DIRECTORY "${PROJECT_BINARY_DIR}/include/exanb")
set(FIELD_SETS_MACROS "#pragma once\n")
set(FIELD_SETS_MACROS "${FIELD_SETS_MACROS}#define XSTAMP_FOR_EACH_FIELD_SET(FS) ${XSTAMP_FOR_EACH_FIELD_SET}\n")
set(FIELD_SETS_MACROS "${FIELD_SETS_MACROS}#define XSTAMP_ENABLED_FIELD_SETS ::exanb::FieldSets<${XSTAMP_ENABLED_FIELD_SETS}>\n")
set(FIELD_SETS_MACROS "${FIELD_SETS_MACROS}#ifndef XSTAMPV2_OVERRIDE_DEFAULT_FIELDS_SETS\n")
set(FIELD_SETS_MACROS "${FIELD_SETS_MACROS}#define XSTAMPV2_OVERRIDE_DEFAULT_FIELDS_SETS XSTAMP_ENABLED_FIELD_SETS\n")
set(FIELD_SETS_MACROS "${FIELD_SETS_MACROS}#endif\n")
set(FIELD_SETS_MACROS "${FIELD_SETS_MACROS}\n")
file(WRITE "${PROJECT_BINARY_DIR}/include/exanb/field_sets_macro.h" "${FIELD_SETS_MACROS}\n")

# customize instanciation of grid templates, so that 
set(fscounter 0)
foreach(FS ${FIELD_SETS_DATA})
#  set(GRID_VARIANT_LIST "${GRID_VARIANT_LIST}#define USTAMP_FIELD_SETS ::exanb::FieldSets<::exanb::${FS}>\n")
  if(XSTAMP_ENABLE_${FS})
#    message(STATUS "enable ${FS}")    
    set(GRID_VARIANT_LIST "${GRID_VARIANT_LIST}#define XSTAMPV2_OVERRIDE_DEFAULT_FIELDS_SETS ::exanb::FieldSets<::exanb::${FS}>\n")
    set(XSTAMP_ENABLED_FIELD_SET_NAMES "${XSTAMP_ENABLED_FIELD_SET_NAMES} ${FS}")
    math(EXPR fscounter "${fscounter}+1")
#  else()
#    message(STATUS "disable ${FS}")
  endif()
endforeach()
set(GRID_VARIANT_FILE ${CMAKE_BINARY_DIR}/GridVariantList.cmake_data)
file(WRITE ${GRID_VARIANT_FILE} "${GRID_VARIANT_LIST}")
message(STATUS "enabled field sets :${XSTAMP_ENABLED_FIELD_SET_NAMES}")

function(ParseSourceVariants src VariantDB)
  file(READ ${src} srcdata)
  string(REGEX REPLACE "#[ \t]*pragma[ \t]+xstamp_cuda_enable" "" srcdata "${srcdata}")
  string(REGEX REPLACE "#[ \t]*pragma[ \t]+xstamp_grid_variant" "\$\{GRID_VARIANT:\}" srcdata "${srcdata}")
  list(APPEND ${VariantDB}VarDef "-DGRID_VARIANT_FILE=${GRID_VARIANT_FILE}")
  string(REGEX MATCHALL "\\\$\{[^\}]+\}" varlist "${srcdata}")
  foreach(var ${varlist})
    if(${var} MATCHES "\\\$\{GRID_VARIANT:")
#      message("found ${var} in ${src}")
      list(APPEND ${VariantDB}List "${GRID_VARIANT_LIST}")
    elseif(${var} MATCHES "\\\$\{VARIANT:")
      string(REGEX REPLACE "\\\$\{VARIANT:" "" var "${var}")
      string(REGEX REPLACE "\}\$" "" var "${var}")
      string(REGEX REPLACE "^[ \t\n]+" "" var "${var}")
#      message("found variant : ${var}")
      list(APPEND ${VariantDB}List "${var}")
    else()
      string(REGEX REPLACE "\\\$\{" "" var "${var}")
      string(REGEX REPLACE "\}\$" "" var "${var}")
      #message(STATUS "found CMake var ${var}")
      list(APPEND ${VariantDB}VarDef "-D${var}=${${var}}")
    endif()
  endforeach()
  set(${VariantDB}List ${${VariantDB}List} PARENT_SCOPE)
  set(${VariantDB}VarDef ${${VariantDB}VarDef} PARENT_SCOPE)
endfunction()

function(GenVariantSourceFileNames VariantIndex VariantDB)
  list(LENGTH ${VariantDB}List NVariants)
  if(${VariantIndex} EQUAL NVariants)
    list(LENGTH ${VariantDB}SourceFiles FileCounter)
    set(srcfilename ${${VariantDB}SourceFilePrefix}${FileCounter}${${VariantDB}SourceFileSuffix})
    list(APPEND ${VariantDB}SourceFiles ${srcfilename})
  else()
    math(EXPR NextVariantIndex "${VariantIndex}+1")
    list(GET ${VariantDB}List ${VariantIndex} variant)
    string(REGEX MATCHALL "[^\n]*\n" values "${variant}")
    list(LENGTH values nvalues)
    foreach(val ${values})
      GenVariantSourceFileNames(${NextVariantIndex} ${VariantDB})
    endforeach()
  endif()
  set(${VariantDB}SourceFiles ${${VariantDB}SourceFiles} PARENT_SCOPE)
endfunction()

function(GenerateSourcesFromInput src srcdir dstdir VariantDB outsrclist outtarget)

    ParseSourceVariants(${src} ${VariantDB})
    
    string(REGEX REPLACE ".in\$" "" ${VariantDB}SourceFilePrefix "${src}")
    string(REGEX MATCH "\.[^\.]+\$" ${VariantDB}SourceFileSuffix "${${VariantDB}SourceFilePrefix}")
    string(REGEX REPLACE "${${VariantDB}SourceFileSuffix}\$" "" ${VariantDB}SourceFilePrefix "${${VariantDB}SourceFilePrefix}")
    string(REPLACE "${srcdir}" "${dstdir}" ${VariantDB}SourceFilePrefix "${${VariantDB}SourceFilePrefix}")
    
    list(LENGTH ${VariantDB}List nvariants)
    if(${nvariants} EQUAL 0)
      set(srcfilename ${${VariantDB}SourceFilePrefix}${${VariantDB}SourceFileSuffix})
      set(${VariantDB}SourceFiles ${srcfilename})
    else()
      GenVariantSourceFileNames(0 ${VariantDB})
    endif()
    list(APPEND ${outsrclist} ${${VariantDB}SourceFiles})
    
    # generate a target to generate the set of files
    string(REPLACE ";" " " tmpsrclist "${${VariantDB}SourceFiles}")
    string(REPLACE ";" " " tmpvardef "${${VariantDB}VarDef}")
    string(MD5 TargetName "${src}")
    set(TargetName GenSource${TargetName})
    add_custom_target(${TargetName} COMMAND ${CMAKE_COMMAND} -DSourceFile=${src} -DInputBaseDir=${PROJECT_SOURCE_DIR} -DOutputBaseDir=${PROJECT_BINARY_DIR} ${tmpvardef} -P ${CONFIGURE_GENERATE_VARIANTS_SCRIPT} DEPENDS ${src})
    add_custom_command(OUTPUT ${${VariantDB}SourceFiles} COMMAND ${CMAKE_COMMAND} -DSourceFile=${src} -DInputBaseDir=${PROJECT_SOURCE_DIR} -DOutputBaseDir=${PROJECT_BINARY_DIR} ${tmpvardef} -P ${CONFIGURE_GENERATE_VARIANTS_SCRIPT} DEPENDS ${src})

    unset(${VariantDB}List)
    unset(${VariantDB}VarDef)
    unset(${VariantDB}SourceFilePrefix)
    unset(${VariantDB}SourceFileSuffix)
    unset(${VariantDB}SourceFiles)
    unset(VariantDB)
    
    set(${outsrclist} ${${outsrclist}} PARENT_SCOPE)
    set(${outtarget} ${TargetName} PARENT_SCOPE)
endfunction()


function(XStampSourceListMD5 srclist digestvar)
  string(MD5 DIGEST "${srclist}")
  foreach(src ${srclist})
    file(READ ${src} content)
    string(MD5 SRC_DIGEST "${content}")
    set(DIGEST "${DIGEST}${SRC_DIGEST}")
  endforeach()
  string(MD5 FINAL_DIGEST "${DIGEST}")
  # message(STATUS "Hash source list : ${srclist} => ${DIGEST} => ${FINAL_DIGEST}")
  set(${digestvar} ${FINAL_DIGEST} PARENT_SCOPE)
endfunction()

function(GeneratedSourceList insrclist outsrclist outtarget)
  set(dbcounter 0)
  if("${insrclist}" STREQUAL "" AND "${${outsrclist}}" STREQUAL "")
    #message(STATUS "source list is empty")
    unset(${outtarget} PARENT_SCOPE)
    unset(${outsrclist} PARENT_SCOPE)
  else()
    XStampSourceListMD5("${${outsrclist}};${insrclist}" TargetName)
    #message(STATUS "GeneratedSourceList insrclist='${insrclist}' outsrclist='${${outsrclist}}' TargetName => ${TargetName}")
    set(TargetName GenSourceList${TargetName})  
    add_custom_target(${TargetName})
    foreach(src ${insrclist})
      set(VariantDB DB${dbcounter})
      #message(STATUS "process ${src} to DataBase ${VariantDB}")
      GenerateSourcesFromInput(${src} ${PROJECT_SOURCE_DIR} ${PROJECT_BINARY_DIR} ${VariantDB} ${outsrclist} InputTargetName)
      add_dependencies(${TargetName} ${InputTargetName})
      math(EXPR dbcounter "${dbcounter}+1")
    endforeach()
    set(${outsrclist} ${${outsrclist}} PARENT_SCOPE)
    set(${outtarget} ${TargetName} PARENT_SCOPE)
  endif()
endfunction()

function(GenerateDirectorySourceFilesFunc dir var outtarget)
  file(GLOB cuda_sources ${dir}/*.cu)
  file(GLOB sources ${dir}/*.cpp)
  file(GLOB inputs ${dir}/*.cpp.in)
  file(GLOB cuda_inputs ${dir}/*.cu.in)
  
  foreach(srcfile ${sources})
    file(READ ${srcfile} srcdata)
    if("${srcdata}" MATCHES "#[ \t]*pragma[ \t]+xstamp_cuda_enable" AND XSTAMP_BUILD_CUDA)
#      message(STATUS "${srcfile} contains xstamp_cuda_enable")
      list(REMOVE_ITEM sources "${srcfile}")
      get_filename_component(srcfile_basename ${srcfile} NAME_WLE)
      file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/gen/${var})
      set(cusrcfile ${CMAKE_CURRENT_BINARY_DIR}/gen/${var}/${srcfile_basename}.cu)
#      message("link ${srcfile} -> ${cusrcfile}")
      file(CREATE_LINK ${srcfile} ${cusrcfile} SYMBOLIC)
      list(APPEND cuda_sources "${cusrcfile}")
    elseif("${srcdata}" MATCHES "#[ \t]*pragma[ \t]+xstamp_grid_variant")
#      message(STATUS "${srcfile} contains xstamp_grid_variant")
      list(REMOVE_ITEM sources "${srcfile}")
      list(APPEND inputs "${srcfile}")
    endif()
  endforeach()
  
  foreach(srcfile ${cuda_sources})
    file(READ ${srcfile} srcdata)
    if("${srcdata}" MATCHES "#[ \t]*pragma[ \t]+xstamp_grid_variant")
#      message(STATUS "${srcfile} contains xstamp_grid_variant")
      list(REMOVE_ITEM cuda_sources "${srcfile}")
      list(APPEND cuda_inputs "${srcfile}")
    endif()
  endforeach()

  GeneratedSourceList("${inputs}" sources TargetName)
  GeneratedSourceList("${cuda_inputs}" cuda_sources CudaTargetName)

  if(cuda_sources)
#    message(STATUS "Cuda Target=${CudaTargetName} sources: ${cuda_sources}")
    set(${var}_CU ${cuda_sources} PARENT_SCOPE)
    set(${outtarget}_CU ${CudaTargetName} PARENT_SCOPE)
  endif()

  file(GLOB lib_srcs ${dir}/lib/*.cpp)
  file(GLOB lib_inputs ${dir}/lib/*.cpp.in)
  GeneratedSourceList("${lib_inputs}" lib_srcs LibTargetName)
  if(lib_srcs)
#    message(STATUS "Plugin ${var} has lib : ${lib_srcs}")
    set(${var}_LIB ${lib_srcs} PARENT_SCOPE)
    set(${outtarget}_LIB ${LibTargetName} PARENT_SCOPE)
  endif()

  # message(STATUS "${dir} => ${TargetName}")
  set(${var} ${sources} PARENT_SCOPE)
  set(${outtarget} ${TargetName} PARENT_SCOPE)
endfunction()

set_property(GLOBAL PROPERTY GLOBAL_XSTAMP_SOURCE_ID 0)
set_property(GLOBAL PROPERTY GLOBAL_XSTAMP_TARGET_ID 0)
set(XSTAMP_SOURCE_ID 0)
set(XSTAMP_TARGET_ID 0)
set(XSTAMP_TARGET_ID_DEFINITIONS -DXSTAMP_TARGET_ID=${XSTAMP_TARGET_ID})

macro(XstampIncrementTargetId)
  get_property(XSTAMP_TARGET_ID GLOBAL PROPERTY GLOBAL_XSTAMP_TARGET_ID)
  math(EXPR XSTAMP_TARGET_ID ${XSTAMP_TARGET_ID}+1)
  set_property(GLOBAL PROPERTY GLOBAL_XSTAMP_TARGET_ID ${XSTAMP_TARGET_ID})
  set(XSTAMP_TARGET_ID_DEFINITIONS -DXSTAMP_TARGET_ID=${XSTAMP_TARGET_ID})
endmacro()

macro(XstampIncrementSourceId)
  get_property(XSTAMP_SOURCE_ID GLOBAL PROPERTY GLOBAL_XSTAMP_SOURCE_ID)
  math(EXPR XSTAMP_SOURCE_ID ${XSTAMP_SOURCE_ID}+1)
  set_property(GLOBAL PROPERTY GLOBAL_XSTAMP_SOURCE_ID ${XSTAMP_SOURCE_ID})
endmacro()

macro(GenerateDirectorySourceFiles dir var outtarget)
  XstampIncrementTargetId()
  GenerateDirectorySourceFilesFunc(${dir} ${var} ${outtarget})
  foreach(src ${${var}})
    XstampIncrementSourceId()
    set_source_files_properties(${src} PROPERTIES COMPILE_DEFINITIONS XSTAMP_SOURCE_ID=${XSTAMP_SOURCE_ID})
  endforeach()
  if(${var}_CU)
    foreach(src ${${var}_CU})
      XstampIncrementSourceId()
#      message(STATUS "file ${src} : XSTAMP_SOURCE_ID=${XSTAMP_SOURCE_ID}")
      set_source_files_properties(${src} PROPERTIES COMPILE_DEFINITIONS XSTAMP_SOURCE_ID=${XSTAMP_SOURCE_ID})
    endforeach()
  endif()
endmacro()

macro(GenerateCurrentDirectorySourceFiles var outtarget)
  GenerateDirectorySourceFiles(${CMAKE_CURRENT_SOURCE_DIR} ${var} ${outtarget})
endmacro()

